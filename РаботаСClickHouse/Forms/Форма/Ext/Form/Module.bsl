

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КартинкаПрогресс = Новый Картинка(РеквизитФормыВЗначение("Объект").ПолучитьМакет("КартинкаПрогресс"), Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НастройкиСоединенияКорректны() Тогда
		ПоказатьОповещениеПользователя("Начальная инициализация обработки",, "Установка соединения с сервером ClickHouse", КартинкаПрогресс,, "1");
		Попытка
			ПроверитьСоединение(Неопределено, Ложь);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя("Начальная инициализация обработки",, "Чтение данных ОМД", КартинкаПрогресс,, "1");
	ЗаполнитьДанныеОМДНаСервере();
	
	ПоказатьОповещениеПользователя("Начальная инициализация обработки",, "Чтение файлов настроек", КартинкаПрогресс,, "1");
	ПрочитатьКаталогНастроек(Неопределено);
	
	УстановитьОтборТаблицаРеквизитов("1","1");	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОМДНаСервере()
	
	Для Каждого ЭлементТипаОМД Из Элементы.ВыгружаемыйТипОМД.СписокВыбора Цикл
		
		Для Каждого ОМД Из Метаданные[ЭлементТипаОМД.Значение] Цикл
			НоваяСтрока = ТаблицаОбъектовОМД.Добавить();
			НоваяСтрока.ТипОМД = ЭлементТипаОМД.Значение;
			НоваяСтрока.ОМД = ОМД.Имя;
			
			Если ПустаяСтрока(ОМД.Синоним) Тогда
				НоваяСтрока.Синоним = ОМД.Имя;
			Иначе 
				НоваяСтрока.Синоним = ОМД.Синоним;
			КонецЕсли;
			
			ЗаполнитьРеквизиты(ЭлементТипаОМД, ОМД, "СтандартныеРеквизиты");
						
			Если НЕ СтрНайти(ЭлементТипаОМД.Значение, "Регистр") = 0 Тогда
				ЗаполнитьРеквизиты(ЭлементТипаОМД, ОМД, "Измерения");
				ЗаполнитьРеквизиты(ЭлементТипаОМД, ОМД, "Ресурсы");				
			КонецЕсли;
			
			ЗаполнитьРеквизиты(ЭлементТипаОМД, ОМД, "Реквизиты");						
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизиты(ЭлементТипаОМД, ОМД, ИмяСвойстваРеквизитов)
	
	Для Каждого Реквизит Из ОМД[ИмяСвойстваРеквизитов] Цикл
		НоваяСтрокаРек = ТаблицаРеквизитовОМД.Добавить();
		НоваяСтрокаРек.ТипОМД = ЭлементТипаОМД.Значение;
		НоваяСтрокаРек.ОМД = ОМД.Имя;
		НоваяСтрокаРек.ИмяРеквизита = Реквизит.Имя;
		НоваяСтрокаРек.ТипРеквизита = Реквизит.Тип;		
		НоваяСтрокаРек.ИмяРеквизитаCH = Транслит(Реквизит.Имя);
		
		Если Реквизит.Тип.СодержитТип(Тип("Строка")) 
			 ИЛИ Реквизит.Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
			НоваяСтрокаРек.ТипРеквизитаCH = "String";
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Дата")) Тогда
			Если Реквизит.Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда 
				НоваяСтрокаРек.ТипРеквизитаCH = "Date";
			Иначе
				НоваяСтрокаРек.ТипРеквизитаCH = "DateTime";
			КонецЕсли;
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Булево")) Тогда
			НоваяСтрокаРек.ТипРеквизитаCH = "UInt8";
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Число")) Тогда
			
			Если НЕ Реквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда
				НоваяСтрокаРек.ТипРеквизитаCH = "Float64";
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой Тогда
				ДопИмя = "";
			Иначе
				ДопИмя = "U";
			КонецЕсли;
			
			НоваяСтрокаРек.ТипРеквизитаCH = ДопИмя + "Int64";
		ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		Иначе
			
			ТипыРеквизита = Реквизит.Тип.Типы();
			
			Если ТипыРеквизита.Количество() > 1
				ИЛИ ТипыРеквизита.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Тип = ТипыРеквизита[0];
			ТипМД = Метаданные.НайтиПоТипу(Тип);
			
			Если НЕ СтрНайти(ТипМД.ПолноеИмя(), "Перечисление") = 0 Тогда
				СтрокаЗначений = "";
				
				Для Каждого Значение Из ТипМД.ЗначенияПеречисления Цикл
					Индекс = ТипМД.ЗначенияПеречисления.Индекс(Значение) + 1;
					СтрокаЗначений = СтрокаЗначений + "'" + Значение.Синоним + "' = " + Формат(Индекс, "ЧГ=") + ", ";
				КонецЦикла;
				
				Если НЕ СтрДлина(СтрокаЗначений) = 0  Тогда
					СтрокаЗначений = Лев(СтрокаЗначений, СтрДлина(СтрокаЗначений) - 2); 	
				КонецЕсли;
				
				НоваяСтрокаРек.ТипРеквизитаCH = "Enum8(" + СтрокаЗначений + ")";
				
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаРек.ТипРеквизитаCH = "String";
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Транслит(Вход) 
    Коды = Новый Соответствие;
    Коды.Вставить("ё","yo");
    Коды.Вставить("Ё","Yo");
    Нач = КодСимвола("А");
    Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
    Для К = Нач по КодСимвола("я") Цикл
        Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
    КонецЦикла;
    Выход = "";
    Для К=1 по СтрДлина(Вход) Цикл
        Бкв = Сред(Вход,К,1);
        Зн = Коды.Получить(Бкв);
        Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);
    КонецЦикла;
    Возврат Выход;
КонецФункции


&НаКлиенте
Процедура ВыгружаемыйТипОМДПриИзменении(Элемент)
	
	СписокВыбора = Элементы.ВыгружаемыйОбъектМетаданных.СписокВыбора;
	СписокВыбора.Очистить();
	
	СтруктураПоиска = Новый Структура("ТипОМД", ВыгружаемыйТипОМД);
	
	НайденныеСтроки = ТаблицаОбъектовОМД.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокВыбора.Добавить(НайденнаяСтрока.ОМД, НайденнаяСтрока.ОМД); 	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыйОбъектМетаданныхПриИзменении(Элемент)	
	УстановитьОтборТаблицаРеквизитов(ВыгружаемыйТипОМД, ВыгружаемыйОМД);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТаблицаРеквизитов(ТипОМД, ОМД)
	СтруктураПоиска = Новый Структура("ТипОМД, ОМД", ТипОМД, ОМД);
	Элементы.ТаблицаРеквизитовОМД.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКоманду(Команда)
	
	Текст = ТекстСозданияТаблиц();
	
	Текст = СтрЗаменить(Текст, "ИмяБД", ИмяБД);
	Текст = СтрЗаменить(Текст, "ИмяТаблицы", ИмяТаблицы);
	Текст = СтрЗаменить(Текст, "КолонкиТаблицы", СформироватьКолонкиТаблицы());
	Текст = СтрЗаменить(Текст, "КолонкаПартиции", ПолучитьКолонкуПартиции());
	Текст = СтрЗаменить(Текст, "КолонкиИндексов", ПолучитьКолонкиИндекса());
	
	ТекстКомандыСозданияТаблицы = Текст;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКолонкуПартиции()
	
	СтруктураПоиска = Новый Структура("ТипОМД, ОМД, ИспользоватьДляПартиции", ВыгружаемыйТипОМД, ВыгружаемыйОМД, Истина);
	
	НайденныеСтроки = ТаблицаРеквизитовОМД.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	
	Если НайденнаяСтрока.ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
		Возврат "Part_" + НайденнаяСтрока.ИмяРеквизитаCH;
	Иначе
		Возврат НайденнаяСтрока.ИмяРеквизитаCH;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКолонкиИндекса()
	
	СтруктураПоиска = Новый Структура("ТипОМД, ОМД, Индексировать", ВыгружаемыйТипОМД, ВыгружаемыйОМД, Истина);
	
	НайденныеСтроки = ТаблицаРеквизитовОМД.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаКолонок = "";
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаКолонок = СтрокаКолонок + НайденнаяСтрока.ИмяРеквизитаCH + ","	
	КонецЦикла;

	Возврат Лев(СтрокаКолонок, СтрДлина(СтрокаКолонок) - 1);
		
КонецФункции

&НаКлиенте
Функция СформироватьКолонкиТаблицы()
	
	СтруктураПоиска = Новый Структура("ТипОМД, ОМД, ПереноситьВCH", ВыгружаемыйТипОМД, ВыгружаемыйОМД, Истина);
	
	НайденныеСтроки = ТаблицаРеквизитовОМД.НайтиСтроки(СтруктураПоиска);
	
	СтрокаКолонок = "";
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.ИспользоватьДляПартиции
			И НайденнаяСтрока.ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
			
			СтрокаКолонок = СтрокаКолонок + Символы.Таб + "Part_" + НайденнаяСтрока.ИмяРеквизитаCH + " Date";
			
			Если НЕ ПустаяСтрока(НайденнаяСтрока.ВыражениеПоУмолчаниюCH) Тогда
				СтрокаКолонок = СтрокаКолонок + " DEFAULT " + НайденнаяСтрока.ВыражениеПоУмолчаниюCH;
			КонецЕсли;
			
			СтрокаКолонок = СтрокаКолонок + "," + Символы.ПС;	
			
		КонецЕсли;
		
		СтрокаКолонок = СтрокаКолонок + Символы.Таб + НайденнаяСтрока.ИмяРеквизитаCH + " " + НайденнаяСтрока.ТипРеквизитаCH;
		
		Если НЕ ПустаяСтрока(НайденнаяСтрока.ВыражениеПоУмолчаниюCH)
			И НЕ НайденнаяСтрока.ИспользоватьДляПартиции Тогда
			СтрокаКолонок = СтрокаКолонок + " DEFAULT " + НайденнаяСтрока.ВыражениеПоУмолчаниюCH;
		КонецЕсли;
		
		СтрокаКолонок = СтрокаКолонок + "," + Символы.ПС;
	
	КонецЦикла;
	
	Если СтрДлина(СтрокаКолонок) = 0 Тогда
		Возврат СтрокаКолонок;
	КонецЕсли;
	
	СтрокаКолонок = Лев(СтрокаКолонок, СтрДлина(СтрокаКолонок) - 2);
	
	Возврат СтрокаКолонок;
	
КонецФункции

&НаСервере
Функция ТекстСозданияТаблиц()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ТекстКомандыСозданияТаблицы").ПолучитьТекст();
КонецФункции

&НаКлиенте
Процедура СерверCH_АдресПриИзменении(Элемент)
	
	Если СтрНайти(ВРег(СерверCH_Адрес), "HTTPS") = 0 Тогда
		СерверCH_ЗащищенноеСоединение = Ложь;
	Иначе
		СерверCH_ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда, ПоказыватьПредупреждение = Истина)
	
	Соединение = СоединениеССерверомClickHouse();
	
	#Если _ Тогда
		Соединение = Новый HTTPСоединение();
	#КонецЕсли
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Соединение.Получить(Новый HTTPЗапрос(""));
	
	СоединениеЕсть = Ложь;
	
	Если СокрЛП(Ответ.ПолучитьТелоКакСтроку()) = "Ok." Тогда
		СоединениеЕсть = Истина;
		
		Запрос = Новый HTTPЗапрос("");
		Запрос.УстановитьТелоИзСтроки("show databases FORMAT JSON");
		
		Данные = ПрочитатьJSON_CH(Соединение.ОтправитьДляОбработки(Запрос));
		
		Для Каждого ДанныеСтроки Из Данные.data Цикл
			Элементы.ИмяБД.СписокВыбора.Добавить(ДанныеСтроки.name);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПоказыватьПредупреждение ИЛИ НЕ СоединениеЕсть Тогда
		ПоказатьПредупреждение(, Формат(СоединениеЕсть, "БЛ='Соединение отсутствует'; БИ='Соединение установлено'"),, "Проверка соединения с ClickHouse");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СоединениеССерверомClickHouse() Экспорт
		
	Если НЕ НастройкиСоединенияКорректны() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СерверCH_ЗащищенноеСоединение Тогда
		ДанныеЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ДанныеЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Адрес = СтрЗаменить(СтрЗаменить(ВРег(СерверCH_Адрес), "HTTPS://", ""), "HTTP://", "");
	
	Соединение = Новый HTTPСоединение(Адрес, СерверCH_Порт, СерверCH_ИмяПользователя, СерверCH_Пароль,, СерверCH_Таймаут, ДанныеЗащищенноеСоединение);	
	                  
	Возврат Соединение;
	
КонецФункции

&НаКлиенте
Функция НастройкиСоединенияКорректны() Экспорт 
	
	НастройкиКорректны = Истина;
		
	Если ПустаяСтрока(СерверCH_Адрес) Тогда
		Сообщить("Не заполнен адрес сервера ClickHouse");
		НастройкиКорректны = Ложь;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СерверCH_Порт) Тогда
		Сообщить("Не заполнен порт сервера ClickHouse");
		НастройкиКорректны = Ложь;	
	КонецЕсли;
	
	Возврат НастройкиКорректны;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаРеквизитовОМДИспользоватьДляПартицииПриИзменении(Элемент)
	
	Данные = Элементы.ТаблицаРеквизитовОМД.ТекущиеДанные;
	
	Если НЕ Данные.ИспользоватьДляПартиции Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Данные.ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
		Данные.ИспользоватьДляПартиции = Ложь;
		Сообщить("Для партиции можно использова реквизиты только с типом дата");
		Возврат;
	КонецЕсли;
	                                                                                                   
	СтруктураПоиска = Новый Структура("ТипОМД, ОМД, ИспользоватьДляПартиции", ВыгружаемыйТипОМД, ВыгружаемыйОМД, Истина);
	
	НайденныеСтроки = ТаблицаРеквизитовОМД.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		Данные.ИспользоватьДляПартиции = Ложь;
		Сообщить("Для партиции может быть использован только один реквизит");
		Возврат;	
	КонецЕсли;
	
	Данные.ПереноситьВCH = Истина;
	
	Если Данные.ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
		Данные.ВыражениеПоУмолчаниюCH = " toDate(" + Данные.ИмяРеквизитаCH + ")"; 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовОМДИндексироватьПриИзменении(Элемент)
	
	Данные = Элементы.ТаблицаРеквизитовОМД.ТекущиеДанные;
	
	Если НЕ Данные.Индексировать Тогда
		Возврат;
	КонецЕсли;
	
	Данные.ПереноситьВCH = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ИмяФайла = КаталогСохраненныхНастроек + "\" + ВыгружаемыйТипОМД + "_" + ВыгружаемыйОМД + ".json";
	
	СтруктураПоиска = Новый Структура("ТипОМД, ОМД", ВыгружаемыйТипОМД, ВыгружаемыйОМД);
	
	НайденныеСтроки = ТаблицаРеквизитовОМД.НайтиСтроки(СтруктураПоиска);
	
	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл(ИмяФайла, КодировкаТекста.UTF8, Ложь);
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НоваяСтрока = СтруктураЗаписиНастроек();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		МассивРеквизитов.Добавить(НоваяСтрока);
	КонецЦикла;                               
	
	ЗаписатьJSON(Запись, МассивРеквизитов);
	Запись.Закрыть()
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураЗаписиНастроек()
	
	Структура = Новый Структура;
	Структура.Вставить("ТипОМД", "");
	Структура.Вставить("ОМД", "");
	Структура.Вставить("ИмяРеквизита", "");
	Структура.Вставить("ИмяРеквизитаCH", "");
	Структура.Вставить("ТипРеквизитаCH", "");
	Структура.Вставить("Индексировать", Ложь);
	Структура.Вставить("ИспользоватьДляПартиции", Ложь);
	Структура.Вставить("ПереноситьВCH", Ложь);
	Структура.Вставить("ВыражениеПоУмолчаниюCH", "");
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПолучитьКаталогОбработки()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции

&НаКлиенте
Процедура ПрочитатьКаталогНастроек(Команда)
	
	Если ПустаяСтрока(КаталогСохраненныхНастроек) Тогда
		РасположениеОбработки = ПолучитьКаталогОбработки();	
		
		ФайлОбработки = Новый Файл(РасположениеОбработки);
		КаталогПуть = ФайлОбработки.Путь;
		
		Каталог = Новый Файл(КаталогПуть + "НастройкиРаботыСClickHouse");
		
		Если НЕ Каталог.Существует() Тогда
			СоздатьКаталог(КаталогПуть + "НастройкиРаботыСClickHouse");
		КонецЕсли;
		
		КаталогСохраненныхНастроек = КаталогПуть + "НастройкиРаботыСClickHouse";
		
	КонецЕсли;
	
	КаталогРеквизитов = КаталогСохраненныхНастроек + "\" + "НастройкиРеквизитов\";
	Каталог = Новый Файл(КаталогРеквизитов);
	
	Если НЕ Каталог.Существует() Тогда
		СоздатьКаталог(КаталогРеквизитов);
	КонецЕсли;
	
	ФайлыНастроек = НайтиФайлы(КаталогРеквизитов, "*.json", Истина);
	
	СписокФайловНастроек.Очистить();
	
	Для Каждого НайденныйФайл Из ФайлыНастроек Цикл
		
		СписокФайловНастроек.Добавить(НайденныйФайл.ПолноеИмя);
		
		Чтение = Новый ЧтениеJSON;
		Чтение.ОткрытьФайл(НайденныйФайл.ПолноеИмя, "UTF8");
		
		ДанныеНастроек = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		
		Для Каждого СтрокаНастроек Из ДанныеНастроек Цикл
			
			СтруктураПоиска = Новый Структура("ТипОМД, ОМД, ИмяРеквизита", СтрокаНастроек.ТипОМД, СтрокаНастроек.ОМД, СтрокаНастроек.ИмяРеквизита);
			НайденныеСтроки = ТаблицаРеквизитовОМД.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаНастроек);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	КаталогЗапросов = КаталогСохраненныхНастроек + "\" + "СохраненныеЗапросы\";
	Каталог = Новый Файл(КаталогЗапросов);
	
	Если НЕ Каталог.Существует() Тогда
		СоздатьКаталог(КаталогЗапросов);
	КонецЕсли; 
	
	ФайлыЗапросов = НайтиФайлы(КаталогЗапросов, "*.json", Истина);
	
	ТаблицаСохраненныхЗапросов.Очистить();
	
	Для Каждого НайденныйФайл Из ФайлыЗапросов Цикл
		
		НоваяСтрока = ТаблицаСохраненныхЗапросов.Добавить();
		НоваяСтрока.ПутьКФайлуЗапроса = НайденныйФайл.ПолноеИмя;
			
		Чтение = Новый ЧтениеJSON;
		Чтение.ОткрытьФайл(НайденныйФайл.ПолноеИмя, "UTF8");
		
		ДанныеЗапроса = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьJSON_CH(Знач Данные, ЧитатьВСоответствие = Ложь)
	
	Если ТипЗнч(Данные) = Тип("HTTPОтвет") Тогда
		ТекстJson = Данные.ПолучитьТелоКакСтроку();
		
		Если ПустаяСтрока(ТекстJson) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		ТекстJson = Данные;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJson);
	
	ДанныеJson = ПрочитатьJSON(Чтение, ЧитатьВСоответствие);
	Чтение.Закрыть();
	
	Возврат ДанныеJson;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	Если НЕ НастройкиСоединенияКорректны() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Соединение = СоединениеССерверомClickHouse();
	ТекущаяДатаЗапросНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Запрос = Новый HTTPЗапрос("");
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса.ПолучитьТекст() + " FORMAT JSON");
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ТекущаяДатаЗапросКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Элементы.КодОтвета.Заголовок = Ответ.КодСостояния;
		
	Если Ответ.КодСостояния = 200 Тогда
		Элементы.КодОтвета.ЦветФона = Новый Цвет(16, 255, 16);
	Иначе
		Элементы.КодОтвета.ЦветФона = Новый Цвет(255, 11, 11);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ДанныеОтвет = ПрочитатьJSON_CH(Ответ, Истина);
	Иначе
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		Элементы.СтраницыЗапрос.ТекущаяСтраница = Элементы.Ответ;
	КонецЕсли;
	
	ТекущаяДатаЧтениеJSONКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Статистика_ВремяВыполненияHTTP 	= (ТекущаяДатаЗапросКонец - ТекущаяДатаЗапросНачало) / 1000;
	Статистика_ВремяЧтенияJSON 		= (ТекущаяДатаЧтениеJSONКонец - ТекущаяДатаЗапросКонец) / 1000;
	
	ТекущаяДатаПреобразованиеJSONНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если НЕ ДанныеОтвет = Неопределено Тогда
		Результат = ПреобразоватьИнформациюОВыполненииВТабличныйДокумент(ДанныеОтвет, ПолучитьМакет());
	КонецЕсли;
	
	ТекущаяДатаПреобразованиеJSONКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Статистика_ОбщееВремяВыполнения = (ТекущаяДатаПреобразованиеJSONКонец - ОбщееВремяНачало) / 1000;
	Статистика_ВремяПреобразованияJSON = (ТекущаяДатаПреобразованиеJSONКонец - ТекущаяДатаПреобразованиеJSONНачало) / 1000;
	
	Если НЕ ДанныеОтвет = Неопределено Тогда
		Статистика_ПрочитаноБайт = ДанныеОтвет["statistics"]["bytes_read"];
		Статистика_ПрочитаноВремя = ДанныеОтвет["statistics"]["statistics.elapsed"];
		Статистика_ПрочитаноСтрок = ДанныеОтвет["statistics"]["statistics.rows_read"];
		Статистика_КоличествоСтрок = ДанныеОтвет["rows"];
	Иначе
		Статистика_ПрочитаноБайт = 0;
		Статистика_ПрочитаноВремя = 0;
		Статистика_ПрочитаноСтрок = 0;
		Статистика_КоличествоСтрок = 0;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьМакет()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетРезультат");
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьИнформациюОВыполненииВТабличныйДокумент(ИнформацияОВыполнении, Макет) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаГор|Верт");
	ОбластьЗначение = Макет.ПолучитьОбласть("СтрокаГор|Верт");
	ОбластьОтступ = Макет.ПолучитьОбласть("СтрокаГор|СтрВерт");
	ОбластьОшибка = Макет.ПолучитьОбласть("ШапкаГор|ОшибкаВерт");
	
	ТабДок.Вывести(ОбластьОтступ);
		
	Для Каждого СтрокаСтруктуры Из ИнформацияОВыполнении["meta"] Цикл
		
		Для Каждого Ключ Из СтрокаСтруктуры Цикл
			ОбластьШапка.Параметры[Ключ.Ключ] = Ключ.Значение;
		КонецЦикла;
		
		ТабДок.Присоединить(ОбластьШапка);
 
	КонецЦикла;
	
	
	Для Каждого СтрокаДанных Из ИнформацияОВыполнении["data"] Цикл
		ТабДок.Вывести(ОбластьОтступ);
		
		Для Каждого СтрокаСтруктуры Из ИнформацияОВыполнении["meta"] Цикл
			ОбластьЗначение.Параметры.ЗначениеДанных =  СтрокаДанных[СтрокаСтруктуры["name"]];
			ТабДок.Присоединить(ОбластьЗначение);
		КонецЦикла;
		
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаСохраненныхЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	НоваяСтрока = ТаблицаСохраненныхЗапросов.Добавить();
	НоваяСтрока.Запрос = ТекстЗапроса.ПолучитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСохраненныхЗапросовНаименованиеЗапросаПриИзменении(Элемент)
	
	Данные = Элементы.ТаблицаСохраненныхЗапросов.ТекущиеДанные;
	Данные.ПутьКФайлуЗапроса = КаталогСохраненныхНастроек + "\СохраненныеЗапросы\Запрос_" + Данные.НаименованиеЗапроса + ".json"; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросы(Команда)
	
	Для Каждого СтрокаЗапроса Из ТаблицаСохраненныхЗапросов Цикл
		
		Если ПустаяСтрока(СтрокаЗапроса.ПутьКФайлуЗапроса) Тогда
			Сообщить("Заполните наименование запроса в строке: " + ТаблицаСохраненныхЗапросов.Индекс(СтрокаЗапроса) + 1);
			Возврат;
		КонецЕсли;
		
		Запись = Новый ЗаписьJSON;
		Запись.ОткрытьФайл(СтрокаЗапроса.ПутьКФайлуЗапроса);
		
		ЗаписатьJSON(Запись, Новый Структура("НаименованиеЗапроса, Запрос", СтрокаЗапроса.НаименованиеЗапроса, СтрокаЗапроса.Запрос));
		Запись.Закрыть();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСохраненныхЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТаблицаСохраненныхЗапросовПутьКФайлуЗапроса Тогда
		СтандартнаяОбработка = Ложь;
		ТекстЗапроса.УстановитьТекст(Элементы.ТаблицаСохраненныхЗапросов.ТекущиеДанные.Запрос);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнению(Команда)
	
	ТекстЗапроса.УстановитьТекст(ТекстКомандыСозданияТаблицы);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Запросы;
	
КонецПроцедуры


